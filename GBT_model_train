import joblib
import pandas as pd
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import GradientBoostingClassifier
import warnings
import time
t=time.time()
warnings.filterwarnings('ignore', category=FutureWarning)
warnings.filterwarnings('ignore',category=DeprecationWarning)

tr_features = pd.read_pickle('./train_features.pkl')
tr_labels = pd.read_pickle('./train_labels.pkl')

def print_results(results):
    print('BEST PARAMS: {}\n'.format(results.best_params_))

    means = results.cv_results_['mean_test_score']
    stds = results.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, results.cv_results_['params']):
        print('{} (+/-{}) for {}'.format(round(mean, 3), round(std * 2, 3), params))
        
booster = GradientBoostingClassifier()
parameters = {
        'n_estimators' : [5,10,100,500],
        'max_depth' : [3,9,27,300]
        }

cv = GridSearchCV(booster, parameters,cv=5, verbose = 10)
cv.fit(tr_features, tr_labels.values.ravel())

print_results(cv)

cv.best_estimator_
elapsed = time.time()-t
