import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from glob import glob
import librosa as lr
from librosa import display as lrdisp
from scipy import signal

# Set directory for source files
data_dir = r'C:\Users\gahee\Desktop\Audio_test_py'
audio_files = glob(data_dir + '/*.mp3')
print('You have imported:'+str(len(audio_files))+' files')

#read/plot audio method
def read_audio(filename,duration = None, offset = None,plot=False):
    audio_arr,sam_freq = lr.load(filename,duration = duration)
    time_ref = np.arange(0,len(audio_arr))/sam_freq
    if plot==True:
        fig, ax = plt.subplots()
        ax.plot(time_ref,audio_arr)
        ax.set(xlabel='Time in [s]',ylabel='Amplitude')
        plt.show()
    return time_ref, audio_arr, sam_freq

#plot hpss spectrogam method    
def plot_spectro(H,P,R):
    fig_spectros,ax_spectros = plt.subplots()

    plt.subplot(3,1,1)
    lrdisp.specshow(lr.amplitude_to_db(np.abs(H), ref=np.max), y_axis = 'log')
    plt.colorbar(format = '%+2.0f dB')
    plt.title('Harmo')

    plt.subplot(3,1,2)
    lrdisp.specshow(lr.amplitude_to_db(np.abs(P), ref=np.max), y_axis = 'log')
    plt.colorbar(format = '%+2.0f dB')
    plt.title('Perco')

    plt.subplot(3,1,3)
    lrdisp.specshow(lr.amplitude_to_db(np.abs(R), ref=np.max), y_axis = 'log')
    plt.colorbar(format = '%+2.0f dB')
    plt.title('Reso')

# Read file and create time array
audio_array=[]
sam_freq = []
time_ref = []
spectros = []
harmos = []
percos = []
sample_duration = 60
sample_offset = 60
hpss_beta = 3

for ind,file_path in enumerate(audio_files):
    print('ind: ' + str(ind))
    print('file_path: ' + file_path)
    #read audio file
    time_ref_tmp, audio_tmp, sam_freq_tmp = read_audio(file_path,duration = sample_duration, offset = sample_offset, plot=False)
    audio_array.append(audio_tmp)
    sam_freq.append(sam_freq_tmp)
    time_ref.append(time_ref_tmp)
    
    #full signal spectrogram
    spectros_tmp = lr.stft(audio_tmp)
    spectros.append(spectros_tmp)
    
    #harmonic percussion spectral separation
    harmos_tmp, percos_tmp = lr.decompose.hpss(spectros_tmp, margin = hpss_beta)
    resos_tmp = spectros_tmp - (harmos_tmp+percos_tmp)
    harmos.append(harmos_tmp)
    percos.append(percos_tmp)
    resos.append(resos_tmp)
    
    #hpss plotting
    plot_spectro(harmos_tmp,percos_tmp,resos_tmp)
    
    #hpss plotting
    plot_spectro(harmos_tmp,percos_tmp,resos_tmp)
    

#use librosa to find beats & tempo and then plot the beats on the time axis 
tempo, beats = lr.beat.beat_track(audio_array[0], sam_freq[0], units = 'time') #no start bpm    
plt.plot(audio_array[0])
for beat in beats[0::4]:
    plt.axvline(x=beat*sam_freq[0], color='r')
