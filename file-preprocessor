import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from glob import glob
import librosa as lr
from librosa import display as lrdisp
from librosa import feature
from scipy import signal

# Set directory for source files
data_dir = r'D:\Users\Cygnus\Desktop\audio_preproc'
audio_files = glob(data_dir + '/*.mp3')
print('You have imported:'+str(len(audio_files))+' files')

#read/plot audio method
def read_audio(filename,duration = None, offset = None,plot=False):
    audio_arr,sam_freq = lr.load(filename,duration = duration)
    time_ref = np.arange(0,len(audio_arr))/sam_freq
    if plot==True:
        fig, ax = plt.subplots()
        ax.plot(time_ref,audio_arr)
        ax.set(xlabel='Time in [s]',ylabel='Amplitude')
        plt.show()
    return time_ref, audio_arr, sam_freq

#plot hpss spectrogam method    
def plot_spectro(H,P,R):
    fig_spectros,ax_spectros = plt.subplots()

    plt.subplot(3,1,1)
    lrdisp.specshow(lr.amplitude_to_db(np.abs(H), ref=np.max), y_axis = 'log')
    plt.colorbar(format = '%+2.0f dB')
    plt.title('Harmo')

    plt.subplot(3,1,2)
    lrdisp.specshow(lr.amplitude_to_db(np.abs(P), ref=np.max), y_axis = 'log')
    plt.colorbar(format = '%+2.0f dB')
    plt.title('Perco')

    plt.subplot(3,1,3)
    lrdisp.specshow(lr.amplitude_to_db(np.abs(R), ref=np.max), y_axis = 'log')
    plt.colorbar(format = '%+2.0f dB')
    plt.title('Reso')
    
def rel_dens(s1,s2):
    #skipping spectros 0 values because spectros = 0 -> H,P,R = 0 and gives nan 
    s2 = np.where(s2 != 0, s2, 1)
    rel_dens= sum(sum(abs(s1/s2)))/(s1.size)
    return rel_dens

def chroma_cqt(audio_sig,sam_freq,fmin,threshold = 0.0):
    hop_length = 512
    cqt_chromagram = lr.feature.chroma_cqt(audio_sig, sr = sam_freq, hop_length = hop_length, threshold = threshold)
    return cqt_chromagram

def plot_chromas(cqt_chromagram,sam_freq):
    plt.figure()
    lrdisp.specshow(cqt_chromagram, sr=sam_freq, x_axis = 'time', y_axis = 'chroma',fmin = fmin, cmap = 'coolwarm')
    
def bar_chromas(cqt_chromagram):
    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
    fig_c = plt.figure()
    ax_c = fig_c.add_axes([0,0,1,1])
    ax_c.bar(notes, np.sum(cqt_chromagram,1))

def harm_order(cqt_chromas):
    chroma_tot  = np.sum(cqt_chromas,1)
    argus = np.argsort(chroma_tot)
    s = ''.join(map(str, argus))
    return int(s)
    
    
# Read file and create time array
audio_array=[]
sam_freq = []
time_ref = []
spectros = []
harmos = []
percos = []
resos = []

harm_dens = []
perc_dens = []
res_dens = []

sample_duration = 50
sample_offset = None
hpss_beta = 1.2
fmin = lr.midi_to_hz(21)

cqt_chromas = []

for ind,file_path in enumerate(audio_files):
    print('ind: ' + str(ind))
    print('file_path: ' + file_path)
    #read audio file
    time_ref_tmp, audio_tmp, sam_freq_tmp = read_audio(file_path,duration = sample_duration, offset = sample_offset, plot=False)
    audio_array.append(audio_tmp)
    sam_freq.append(sam_freq_tmp)
    time_ref.append(time_ref_tmp)
    
    #full signal spectrogram
    spectros_tmp = lr.stft(audio_tmp)
    spectros.append(spectros_tmp)
    
    #harmonic percussion spectral separation
    harmos_tmp, percos_tmp= lr.decompose.hpss(spectros_tmp, margin = hpss_beta)
    resos_tmp = spectros_tmp - (harmos_tmp+percos_tmp)
    harmos.append(harmos_tmp)
    percos.append(percos_tmp)
    resos_tmp = spectros_tmp - (harmos_tmp + percos_tmp)
    resos.append(resos_tmp)
    
    #Calculate respective densities
    harm_dens.append(rel_dens(harmos_tmp,spectros_tmp))
    perc_dens.append(rel_dens(percos_tmp,spectros_tmp))
    res_dens.append(rel_dens(resos_tmp,spectros_tmp))
    
    #hpss plotting
#    plot_spectro(harmos_tmp,percos_tmp,resos_tmp)
    
    cqt_chromas.append(chroma_cqt(audio_tmp, sam_freq_tmp,fmin,threshold = 0.7))
    
    harm_id.append(harm_order(cqt_chromas[ind]))

#    plot_chromas(cqt_chromas[ind],sam_freq_tmp)
