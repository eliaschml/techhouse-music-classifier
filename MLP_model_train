#  Electronic Music Classifier:
#       MLP model training code

import joblib
import pandas as pd
from sklearn.model_selection import GridSearchCV
from sklearn.neural_network import MLPClassifier
import warnings

warnings.filterwarnings('ignore', category=FutureWarning)
warnings.filterwarnings('ignore', category=DeprecationWarning)

#  import training features and labels
tr_features = pd.read_pickle('./train_features.pkl')
tr_labels = pd.read_pickle('./train_labels.pkl')

#  implement print results function
def print_results(results):
    print('BEST PARAMS: {}\n'.format(results.best_params_))

    means = results.cv_results_['mean_test_score']
    stds = results.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, results.cv_results_['params']):
        print('{} (+/-{}) for {}'.format(round(mean, 3), round(std * 2, 3), params))

#  define model params for GridSearchCV
mlp = MLPClassifier(max_iter=2000, early_stopping=False)
parameters = {
    'hidden_layer_sizes': [(100,), (500,), (1000,)],  # ['linear','rbf'],
    'activation': ['relu', 'tanh', 'logistic'],
    'learning_rate': ['constant', 'invscaling', 'adaptive']  # [0.1, 1, 10]
}

#  implement and run GridSearchCV
cv = GridSearchCV(mlp, parameters, cv=5)
cv.fit(tr_features, tr_labels.values.ravel())

#  print GridSearchCV results for performance evaluation
print_results(cv)

#  save best estimator model to pkl file
joblib.dump(cv.best_estimator_, './MLP_model.pkl')
