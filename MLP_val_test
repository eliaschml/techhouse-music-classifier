#  Electronic Music Classifier:
#       MLP model validation code

import pandas as pd
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix

#  import data features and labels
tr_features = pd.read_pickle('./train_features.pkl')
tr_labels = pd.read_pickle('./train_labels.pkl')

val_features = pd.read_pickle('./val_features.pkl')
val_labels = pd.read_pickle('./val_labels.pkl')

te_features = pd.read_pickle('./test_features.pkl')
te_labels = pd.read_pickle('./test_labels.pkl')

#  implement and fit models to validate
mlp1 = MLPClassifier(hidden_layer_sizes=500, activation='relu', learning_rate='invscaling')
mlp1.fit(tr_features, tr_labels.values.ravel())

mlp2 = MLPClassifier(hidden_layer_sizes=500, activation='tanh', learning_rate='invscaling')
mlp2.fit(tr_features, tr_labels.values.ravel())

mlp3 = MLPClassifier(hidden_layer_sizes=500, activation='logistic', learning_rate='constant')
mlp3.fit(tr_features, tr_labels.values.ravel())

#  predict and evaluate labels from features
#  extract precision, recall and confusion matrix as evaluation metrics
for mdl in [mlp1, mlp2, mlp3]:
    y_pred = mdl.predict(val_features)
    accuracy = accuracy_score(val_labels, y_pred)
    precision = precision_score(val_labels, y_pred, average=None)
    recall = recall_score(val_labels, y_pred, average=None)
    conf_mat = confusion_matrix(val_labels, y_pred, labels=["Techno", "House", "Breakbeat", "Ambient"])
    print('MAX DEPTH: {} / ACTIVATION: {} \n-- A: {} / P: {} / R: {}'.format(mdl.hidden_layer_sizes,
                                                                             mdl.activation,
                                                                             accuracy,
                                                                             precision,
                                                                             recall))
    print(conf_mat)

#  test validated model and output final performance metrics
y_pred = mlp2.predict(te_features)
accuracy = accuracy_score(te_labels, y_pred)
precision = precision_score(te_labels, y_pred, average=None)
recall = recall_score(te_labels, y_pred, average=None)
conf_mat = confusion_matrix(te_labels, y_pred, labels=["Techno", "House", "Breakbeat", "Ambient"])
print('MAX DEPTH: {} / # OF EST: {} -- A: {} / P: {} / R: {}'.format(mlp3.hidden_layer_sizes,
                                                                     mlp3.activation,
                                                                     accuracy,
                                                                     precision,
                                                                     recall))
print(conf_mat) 
